name: Build Project
on: push

jobs:
  build-project:
    name: Build ${{ matrix.proxy_dll }} for ${{ matrix.arch }}-bit architecture
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [ 32, 64 ]
        config: [ Release ]
        proxy_dll:
          - audioses
          - d3d9
          - d3d10
          - d3d11
          - dinput8
          - dwmapi
          - dxgi
          - glu32
          - hid
          - iphlpapi
          - msasn1
          - nvapi64
          - opengl32
          - profapi
          - propsys
          - umpdc
          - version
          - winhttp
          - wldp
          - winmm
          - xinput9_1_0
        include:
          - arch: 32
            platform: Win32
            term: amd64_x86

          - arch: 64
            platform: x64
            term: amd64

    env:
      BUILD_DIR: ${{ github.workspace }}\build\${{ matrix.arch }}\${{ matrix.proxy_dll }}
      VCPKG_ROOT: ${{ github.workspace }}\vcpkg
      VCPKG_DISABLE_METRICS: true
      PROXY_DLL: ${{ matrix.proxy_dll }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install and cache the latest CMake
        uses: lukka/get-cmake@latest

      - name: Restore vcpkg and its artifacts.
        uses: actions/cache@v2
        with:
          path: |
            ${{ env.BUILD_DIR }}\vcpkg_installed
            ${{ env.VCPKG_ROOT }}
            !${{ env.VCPKG_ROOT }}\buildtrees
            !${{ env.VCPKG_ROOT }}\packages
            !${{ env.VCPKG_ROOT }}\downloads
          key: vcpkg-${{ hashFiles('vcpkg.json') }}-${{ hashFiles( '.git/modules/vcpkg/HEAD' )}}-${{ matrix.arch }}

      - name: Setup Developer Command Prompt for Microsoft Visual C++.
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.term }}

      - name: Print system DLLs
      - run: ls C:/Windows/System32

      - name: Generate build files & build the project
        run: ./build.ps1 ${{ matrix.arch }} ${{ matrix.proxy_dll }} ${{ matrix.config }}

      - name: Upload the binary file
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.proxy_dll }}-${{ matrix.arch }}
          path: ${{ env.BUILD_DIR }}\${{ matrix.config }}\${{ matrix.proxy_dll }}.dll

  package-project:
    name: Package the artifacts into a release zip
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: build-project
    permissions:
      contents: write
    steps:
      - name: Setup version tag
        id: env_setup
        run: echo "VERSION_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Install required tools
        run: |
          sudo apt update
          sudo apt install zip tree

      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Print artifact tree
        run: tree artifacts

      - name: Make release zip
        run: |
          cp res/Koaloader.json artifacts/Koaloader.json
          cd artifacts
          zip ../Koaloader-${{ env.VERSION_TAG }}.zip ./* -r

      - name: Create a release draft
        uses: softprops/action-gh-release@v1
        with:
          body: '# ðŸ“‘ Changelog'
          draft: true
          prerelease: false
          files: Koaloader-${{ env.VERSION_TAG }}.zip
          name: Release ${{ env.VERSION_TAG }}
          tag_name: ${{ env.VERSION_TAG }}
          fail_on_unmatched_files: true
